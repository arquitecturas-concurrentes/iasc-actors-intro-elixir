Interactive Elixir (1.0.5) - press Ctrl+C to exit (type h() ENTER for help)
iex(1)> succ1 = fn -> 1+1 end
#Function<20.90072148/0 in :erl_eval.expr/5>

iex(2)> pid = spawn succ1
#PID<0.62.0>

iex(3)> Process.alive? pid
false

#Obtenemos el id del proceso mediante self()
iex(4)> self()
#PID<0.59.0>

iex(5)> Process.alive? self()                                                                                                                                                                           true

#Pasaje de mensajes

#El interprete es un proceso también y puedo mandarle mensajes
iex(4)> send self(), self()
#PID<0.59.0>
iex(5)> send self(), :bleh
:bleh
iex(6)> flush
#PID<0.59.0>
:bleh
:ok

receive do
 {:hello, msg} -> msg
 {:world, msg} -> 'dont match'
after
  10_000 -> "No paso nada después de 10s"
end

#veamos algo ahora un poco más complejo
iex(9)> send self(), {:hello, "world"}
{:hello, "world"}
iex(10)> receive do
...(10)> {:hello, msg} -> msg
...(10)> {:world, msg} -> 'dont match'
...(10)> end
"world"

#Cuando un mensaje es enviado a un proceso, el mensaje se almacena en el buzón del proceso. El método receive/1 permite que se pueda buscar el mensaje a partir de su estructura, mediante PM. receive/1 soporta guardas y varias clausulas como case/2, entre otras.

receive do
  {:pepe, msg}  -> msg
after
  1_000 -> "No paso nada después de 1s"
end

iex(11)> receive do
...(11)>   {:pepe, msg}  -> msg
...(11)> after
...(11)>   1_000 -> "No paso nada después de 1s"
...(11)> end
"No paso nada después de 1s"

#En este caso se puede ver como no sucede nada después de 1s, podemos definir un timeout para cuando esperamos que la respuesta esté en nuestro buzón.

#intercomunicación entre procesos

#veamos como comunicar dos procesos A->B

self()
padre = self()

spawn fn -> send(padre, {:hola, self()}) end

receive do
  {:hola, pid} -> "Recibi un mensaje hola de #{inspect pid}"
end


iex(13)> self()
#PID<0.59.0>
iex(14)> padre = self()
#PID<0.59.0>
iex(15)>
nil
iex(16)> spawn fn -> send(padre, {:hola, self()}) end
#PID<0.93.0>
iex(17)>
nil
iex(18)> receive do
...(18)>   {:hola, pid} -> "Recibi un mensaje hola de #{inspect pid}"
...(18)> end
"Recibi un mensaje hola de #PID<0.93.0>"

#Aqui se ve como un proceso envía mensajes a otro proceso, se puede ver como
# PID<0.59.0> ---> {:hola} ---> #PID<0.93.0>


send self(), :saraza
send self(), :pepe
flush

iex(21)> send self(), :saraza
:saraza
iex(22)> send self(), :pepe
:pepe
iex(23)> flush
:saraza
:pepe
:ok

#flush/0 permite que se muestren todos los mensajes que están en el buzón de un proceso

#hay secuencialidad?

g = fn(x) -> :timer.sleep(100); IO.puts "#{x}" end
for n <- 1..10, do: spawn(fn-> g.(n) end)

iex(1)> g = fn(x) -> :timer.sleep(50); IO.puts "#{x}" end
#Function<6.90072148/1 in :erl_eval.expr/5>
iex(2)> g.(1)
1
:ok
iex(3)> for n <- 1..10, do: spawn(fn-> g.(n) end)
#[#PID<0.63.0>, #PID<0.64.0>, #PID<0.65.0>, #PID<0.66.0>, #PID<0.67.0>,
 #PID<0.68.0>, #PID<0.69.0>, #PID<0.70.0>, #PID<0.71.0>, #PID<0.72.0>]
9
10
8
7
6
5
4
3
2
1


#Puntual de erl en Elixir

iex(2)> :shell_default.i
Pid                   Initial Call                          Heap     Reds Msgs
Registered            Current Function                     Stack              
<0.0.0>               erl_init:start/2                      1598     5376    0
init                  init:loop/1                              3              
<0.1.0>               erts_code_purger:start/0               376    44459    0
erts_code_purger      erts_code_purger:wait_for_request        2              
<0.2.0>               erts_literal_area_collector:start     2586    44471    0
                      erts_literal_area_collector:msg_l        9              
<0.3.0>               erts_dirty_process_signal_handler      233      331    0
                      erts_dirty_process_signal_handler        3              
<0.4.0>               erts_dirty_process_signal_handler      233       23    0
                      erts_dirty_process_signal_handler        3              
<0.5.0>               erts_dirty_process_signal_handler      233       23    0
                      erts_dirty_process_signal_handler        3              
<0.6.0>               prim_file:start/0                      233       22    0
                      prim_file:helper_loop/0                  2              
<0.7.0>               socket_registry:start/0                233       24    0
socket_registry       socket_registry:loop/1                   5              
more (y/n)? (y) y
<0.10.0>              erlang:apply/2                        6772   473111    0
erl_prim_loader       erl_prim_loader:loop/3                   7              
<0.42.0>              logger_server:init/1                  2586     2070    0
logger                gen_server:loop/7                       12              
<0.44.0>              erlang:apply/2                        4185    82492    0
application_controlle gen_server:loop/7                        8              
<0.46.0>              application_master:init/4              376       56    0
                      application_master:main_loop/2           8              
<0.47.0>              application_master:start_it/4          233      521    0
                      application_master:loop_it/4             7              
<0.49.0>              supervisor:kernel/1                    610     2849    0
kernel_sup            gen_server:loop/7                       12              
<0.50.0>              erlang:apply/2                        6772   193806    0
code_server           code_server:loop/1                       5              
<0.51.0>              inet_db:init/1                         233      368    0
inet_db               gen_server:loop/7                       12              
<0.53.0>              rpc:init/1                             233       51    0
rex                   gen_server:loop/7                       12              
more (y/n)? (y) y
<0.54.0>              erlang:apply/2                         233       65    0
                      rpc:nodes_observer_loop/1                5              
<0.55.0>              global:init/1                          376      202    0
global_name_server    gen_server:loop/7                       12              
<0.56.0>              erlang:apply/2                         233       57    0
                      global:loop_the_locker/1                 4              
<0.57.0>              erlang:apply/2                         233       23    0
                      global:loop_the_registrar/0              3              
<0.58.0>              global_group:init/1                    233      106    0
global_group          gen_server:loop/7                       12              
<0.59.0>              file_server:init/1                    2586     4309    0
file_server_2         gen_server:loop/7                       12              
<0.60.0>              gen_event:init_it/6                    233       63    0
erl_signal_server     gen_event:fetch_msg/6                   12              
<0.61.0>              supervisor_bridge:standard_error/      233       67    0
standard_error_sup    gen_server:loop/7                       12              
<0.62.0>              erlang:apply/2                         610      675    0
standard_error        standard_error:server_loop/1             3   

# para un pid en particular, ej <0.62.0>

iex(3)> :shell_default.i(0,62,0)
[
  registered_name: :standard_error,
  current_function: {:standard_error, :server_loop, 1},
  initial_call: {:erlang, :apply, 2},
  status: :waiting,
  message_queue_len: 0,
  links: [#PID<0.61.0>, #Port<0.3>],
  dictionary: [encoding: :unicode],
  trap_exit: true,
  error_handler: :error_handler,
  priority: :normal,
  group_leader: #PID<0.46.0>,
  total_heap_size: 1597,
  heap_size: 610,
  stack_size: 3,
  reductions: 676,
  garbage_collection: [
    max_heap_size: %{error_logger: true, kill: true, size: 0},
    min_bin_vheap_size: 46422,
    min_heap_size: 233,
    fullsweep_after: 65535,
    minor_gcs: 1
  ],
  suspending: []
]


spawn fn -> raise "ups" end

spawn_link fn -> raise "ups" end

Process.info(jose, :links)